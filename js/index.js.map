{"version":3,"sources":["index.js"],"names":["freeCellSlots","homeCellSlots","otherCellSlots","initGame","cards","getInitialCards","shuffle","initOtherCellSlots","i","card","point","color","convertCardToColor","suit","convertCardToSuit","number","convertCardToNumber","englishNumber","convertCardToEnglishNumber","draggable","droppable","slotNumber","push","Math","ceil","shuffledCards","JSON","parse","stringify","j","floor","random","temp","length","slotCapacity","refreshGameView","otherCellSlotsDom","document","querySelectorAll","freeCellSlotsDom","homeCellSlotsDom","refreshCellSlotsView","setCardDomsDraggable","slotsDom","slots","forEach","slotDom","index","cardDoms","map","getCardDom","innerHTML","join","imgFileName","main","slotDoms","lastChild","dataset","setCardDomsDroppable","isDragging","draggingDom","initDraggingDomPosition","originX","originY","offsetX","offsetY","draggingDomPosition","game","querySelector","addEventListener","mousedown","event","preventDefault","target","classList","contains","draggble","style","zIndex","pageX","pageY","mousemove","mouseup","dx","dy","transform","droppableDoms","droppingDom","draggingDomClientPosition","getBoundingClientRect","droppableDom","droppableDomClientPosition","left","right","top","bottom","pop","removeEventListener"],"mappings":"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","sourcesContent":["const freeCellSlots = [[], [], [], []];\nconst homeCellSlots = [[], [], [], []];\nconst otherCellSlots = [[], [], [], [], [], [], [], []];\n\nfunction initGame() {\n    let cards = getInitialCards();\n    cards = shuffle(cards);\n    initOtherCellSlots(cards);\n}\n\nfunction getInitialCards() {\n    const cards = [];\n\n    for (let i = 1; i <= 52; i++) {\n        const card = {\n            point: i,\n            color: convertCardToColor(i),\n            suit: convertCardToSuit(i),\n            number: convertCardToNumber(i),\n            englishNumber: convertCardToEnglishNumber(i),\n            draggable: false,\n            droppable: false,\n            slotNumber: 0,\n        };\n        cards.push(card);\n    }\n\n    return cards;\n}\n\nfunction convertCardToColor(point) {\n    const suit = Math.ceil(point / 13);\n\n    switch (suit) {\n        case 1: //梅花\n        case 4: //黑桃\n            return \"blue\";\n        default:\n            //菱形、紅心\n            return \"red\";\n    }\n}\n\nfunction convertCardToSuit(point) {\n    const suit = Math.ceil(point / 13);\n\n    switch (suit) {\n        case 1:\n            return \"club\"; //梅花\n        case 2:\n            return \"diamond\"; //菱形\n        case 3:\n            return \"heart\"; //紅心\n        default:\n            return \"spade\"; //黑桃\n    }\n}\n\nfunction convertCardToNumber(point) {\n    const number = point % 13;\n\n    if (number === 0) {\n        return 13;\n    }\n\n    return number;\n}\n\nfunction convertCardToEnglishNumber(point) {\n    const number = point % 13;\n\n    switch (number) {\n        case 1:\n            return \"A\";\n        case 11:\n            return \"J\";\n        case 12:\n            return \"Q\";\n        case 0:\n            return \"K\";\n        default:\n            return number;\n    }\n}\n\nfunction shuffle(cards) {\n    let shuffledCards = JSON.parse(JSON.stringify(cards));\n\n    for (let i = 0; i < 52; i++) {\n        let j = Math.floor(Math.random() * 52);\n\n        let temp = shuffledCards[j];\n        shuffledCards[j] = shuffledCards[i];\n        shuffledCards[i] = temp;\n    }\n\n    return shuffledCards;\n}\n\nfunction initOtherCellSlots(cards) {\n    for (let i = 0; i < otherCellSlots.length; i++) {\n        let slotCapacity;\n\n        if (i <= 3) {\n            slotCapacity = 7;\n\n            for (let j = 0; j < slotCapacity; j++) {\n                const card = cards[i * slotCapacity + j];\n                card.slotNumber = i;\n                otherCellSlots[i].push(card);\n            }\n        } else {\n            slotCapacity = 6;\n\n            for (let j = 0; j < slotCapacity; j++) {\n                const card = cards[28 + (i - 4) * slotCapacity + j];\n                card.slotNumber = i;\n                otherCellSlots[i].push(card);\n            }\n        }\n    }\n}\n\nfunction refreshGameView() {\n    const otherCellSlotsDom = document.querySelectorAll(\n        \".other-cell-block .card-slot\"\n    );\n    const freeCellSlotsDom = document.querySelectorAll(\n        \".free-cell-block .card-slot\"\n    );\n    const homeCellSlotsDom = document.querySelectorAll(\n        \".home-cell-block .card-slot\"\n    );\n\n    refreshCellSlotsView(otherCellSlotsDom, otherCellSlots);\n    refreshCellSlotsView(freeCellSlotsDom, freeCellSlots);\n    refreshCellSlotsView(homeCellSlotsDom, homeCellSlots);\n    setCardDomsDraggable();\n}\n\nfunction refreshCellSlotsView(slotsDom, slots) {\n    slotsDom.forEach((slotDom, index) => {\n        const cardDoms = slots[index].map((card) => {\n            return getCardDom(card);\n        });\n\n        slotDom.innerHTML = cardDoms.join(\"\");\n    });\n}\n\nfunction getCardDom(card) {\n    let imgFileName = `${card.suit}`;\n    if (card.point % 13 > 10) {\n        imgFileName = `${card.englishNumber}-${card.color}`;\n    }\n\n    return `<div class=\"card ${card.color}\" data-point=\"${\n        card.point\n    }\" data-draggable=${card.draggable} data-droppable=${\n        card.droppable\n    } data-slot-number=${card.slotNumber}>\n                <div class=\"card-header\">\n                    <div class=\"card-number\">${card.englishNumber}</div>\n                    <img\n                        src=\"./images/${card.suit}_s.svg\"\n                        alt=\"\"\n                        class=\"card-suit\"\n                    />\n                </div>\n                <div class=\"card-body\">\n                    <img\n                        src=\"./images/${imgFileName}.svg\"\n                        alt=\"\"\n                        class=\"card-image\"\n                    />\n                </div>\n            </div>`;\n}\n\nfunction main() {\n    initGame();\n    refreshGameView();\n}\n\nmain();\n\nfunction setCardDomsDraggable() {\n    const slotDoms = document.querySelectorAll(\".card-slot\");\n    slotDoms.forEach((slotDom) => {\n        if (slotDom.lastChild) {\n            slotDom.lastChild.dataset.draggable = true;\n        }\n    });\n}\n\nfunction setCardDomsDroppable() {\n    const slotDoms = document.querySelectorAll(\".card-slot\");\n    slotDoms.forEach((slotDom) => {\n        if (slotDom.lastChild) {\n            slotDom.lastChild.dataset.droppable = true;\n        }\n    });\n}\n\nlet isDragging = false;\nlet draggingDom;\nconst initDraggingDomPosition = {\n    originX: 0,\n    originY: 0,\n    offsetX: 0,\n    offsetY: 0,\n};\nlet draggingDomPosition = { ...initDraggingDomPosition };\n\nconst game = document.querySelector(\"#game\");\ngame.addEventListener(\"mousedown\", mousedown);\n\nfunction mousedown(event) {\n    event.preventDefault();\n    if (!event.target.classList.contains(\"card\")) {\n        return;\n    }\n    if (!event.target.dataset.draggble === false) {\n        return;\n    }\n    setCardDomsDroppable();\n    isDragging = true;\n    draggingDom = event.target;\n    draggingDom.style.zIndex = 999;\n    draggingDomPosition.originX = event.pageX;\n    draggingDomPosition.originY = event.pageY;\n    document.addEventListener(\"mousemove\", mousemove);\n    document.addEventListener(\"mouseup\", mouseup);\n}\n\nfunction mousemove(event) {\n    event.preventDefault();\n    if (!isDragging) {\n        return;\n    }\n    const dx = event.pageX - draggingDomPosition.originX;\n    const dy = event.pageY - draggingDomPosition.originY;\n    draggingDom.style.transform = `translate(${draggingDomPosition.offsetX +\n        dx}px, ${draggingDomPosition.offsetY + dy}px)`;\n}\n\nfunction mouseup(event) {\n    event.preventDefault();\n    if (!isDragging) {\n        return;\n    }\n    const droppableDoms = document.querySelectorAll(\n        \".card[data-droppable=true]\"\n    );\n\n    let droppingDom = null;\n    const draggingDomClientPosition = draggingDom.getBoundingClientRect();\n\n    for (let i = 0; i < droppableDoms.length; i++) {\n        const droppableDom = droppableDoms[i];\n\n        // 自己不算\n        if (droppableDom === draggingDom) {\n            continue;\n        }\n\n        const droppableDomClientPosition = droppableDom.getBoundingClientRect();\n\n        // dragging 任何一個角在 droppable 的範圍內\n        // 左上角\n        if (\n            droppableDomClientPosition.left <= draggingDomClientPosition.left &&\n            draggingDomClientPosition.left <=\n                droppableDomClientPosition.right &&\n            droppableDomClientPosition.top <= draggingDomClientPosition.top &&\n            draggingDomClientPosition.top <= droppableDomClientPosition.bottom\n        ) {\n            droppingDom = droppableDom;\n            break;\n        }\n        // 右上角\n        if (\n            droppableDomClientPosition.left <=\n                draggingDomClientPosition.right &&\n            draggingDomClientPosition.right <=\n                droppableDomClientPosition.right &&\n            droppableDomClientPosition.top <= draggingDomClientPosition.top &&\n            draggingDomClientPosition.top <= droppableDomClientPosition.bottom\n        ) {\n            droppingDom = droppableDom;\n            break;\n        }\n        // 左下角\n        if (\n            droppableDomClientPosition.left <= draggingDomClientPosition.left &&\n            draggingDomClientPosition.left <=\n                droppableDomClientPosition.right &&\n            droppableDomClientPosition.top <=\n                draggingDomClientPosition.bottom &&\n            draggingDomClientPosition.bottom <=\n                droppableDomClientPosition.bottom\n        ) {\n            droppingDom = droppableDom;\n            break;\n        }\n        // 右下角\n        if (\n            droppableDomClientPosition.left <=\n                draggingDomClientPosition.right &&\n            draggingDomClientPosition.right <=\n                droppableDomClientPosition.right &&\n            droppableDomClientPosition.top <=\n                draggingDomClientPosition.bottom &&\n            draggingDomClientPosition.bottom <=\n                droppableDomClientPosition.bottom\n        ) {\n            droppingDom = droppableDom;\n            break;\n        }\n    }\n\n    if (droppingDom !== null) {\n        const card = otherCellSlots[draggingDom.dataset.slotNumber].pop();\n        card.slotNumber = droppingDom.dataset.slotNumber;\n        otherCellSlots[droppingDom.dataset.slotNumber].push(card);\n    }\n\n    refreshGameView();\n    draggingDomPosition = initDraggingDomPosition;\n    document.removeEventListener(\"mousemove\", mousemove);\n    document.removeEventListener(\"mouseup\", mouseup);\n    draggingDom.style.zIndex = \"\";\n    isDragging = false;\n}\n"],"file":"index.js"}